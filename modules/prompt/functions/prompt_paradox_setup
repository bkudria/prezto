# Load dependencies.
pmodload 'helper'

CURRENT_BG='NONE'
LEFT_SEPARATOR=''
LEFT_ALT_SEPARATOR=''
RIGHT_SEPARATOR=''
RIGHT_ALT_SEPARATOR=''


# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$LEFT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -Pn $3
}

rprompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{%F{$1}%}$RIGHT_SEPARATOR%{$fg$bg%} "
  else
    echo -n "%F{$1}$RIGHT_SEPARATOR%{$bg$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -Pn $3
}

prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$LEFT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

rprompt_end() {
  echo -n " %{%f%k%}"
}

user_host_segment() {
  local user=`whoami`

  if [[ "$user" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
    prompt_segment black default "%(!.%{%F{red}%}.)$user@%m"
  fi
}

dir_segment() {
  local bg_color
  bg_color='blue'
  [[ $UID -eq 0 ]] && bg_color='red'
  [[ $RETVAL -ne 0 ]] && bg_color='magenta'
  prompt_segment $bg_color black `~/bin/rtab -f`
}

vcs_segment() {
  if $git_status; then
    bg_color='green'
    [[ "${(e%)git_info[dirty]}" != '' ]] && bg_color='yellow'
    prompt_segment $bg_color black '${(e)git_info[prompt]}'
  fi
}

r_vcs_segment() {
  if $git_status && [[ "${(e)git_info[status]}" != '' ]]; then
    rprompt_segment yellow white '${(e)git_info[status]}'
  fi
}

r_rvm_segment() {
  rprompt_segment black red `rvm-prompt v g`
}


function build_prompt {
  RETVAL=$?
  user_host_segment
  dir_segment
  vcs_segment
  prompt_end
}

function build_rprompt() {
  r_rvm_segment
  r_vcs_segment
  rprompt_end
}

function prompt_paradox_preexec {
}

function prompt_paradox_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  if (( $+functions[git-info] )); then
    git_status=git-info
  fi
}

function prompt_paradox_setup {
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_paradox_preexec
  add-zsh-hook precmd  prompt_paradox_precmd

  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  zstyle ':prezto:module:git:info:action' format '! %s'
  zstyle ':prezto:module:git:info:branch' format '%b'
  zstyle ':prezto:module:git:info:commit' format '%.7c'
  zstyle ':prezto:module:git:info:dirty' format '±'
  zstyle ':prezto:module:git:info:indexed' format '-'
  zstyle ':prezto:module:git:info:unindexed' format '-'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:stashed' format 's'
  zstyle ':prezto:module:git:info:keys' format \
    'prompt' '$(coalesce "%b" "%p" "%c")%s' \
    'status' '%S%D' \
    'dirty' '%D'

  # Define prompts.
  PROMPT='
%{%f%b%k%}$(build_prompt) '

  RPROMPT='%{%f%b%k%}$(build_rprompt)'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_paradox_setup "$@"

